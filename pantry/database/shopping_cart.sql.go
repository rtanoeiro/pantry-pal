// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: shopping_cart.sql

package database

import (
	"context"
)

const addItemShopping = `-- name: AddItemShopping :one
INSERT INTO cart_items (item_id, cart_id, item_name, quantity, added_at)
VALUES (?, ?, ?, ?, ?)

RETURNING cart_id, item_id, item_name, quantity, added_at
`

type AddItemShoppingParams struct {
	ItemID   string
	CartID   string
	ItemName string
	Quantity int64
	AddedAt  string
}

func (q *Queries) AddItemShopping(ctx context.Context, arg AddItemShoppingParams) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, addItemShopping,
		arg.ItemID,
		arg.CartID,
		arg.ItemName,
		arg.Quantity,
		arg.AddedAt,
	)
	var i CartItem
	err := row.Scan(
		&i.CartID,
		&i.ItemID,
		&i.ItemName,
		&i.Quantity,
		&i.AddedAt,
	)
	return i, err
}

const getAllShopping = `-- name: GetAllShopping :many
SELECT 
    cart_items.cart_id, 
    cart_items.item_name, 
    cart_items.quantity, 
    cart_items.added_at 
FROM cart_items
INNER JOIN shopping_cart
ON shopping_cart.id = cart_items.cart_id
WHERE shopping_cart.user_id = ?
`

type GetAllShoppingRow struct {
	CartID   string
	ItemName string
	Quantity int64
	AddedAt  string
}

func (q *Queries) GetAllShopping(ctx context.Context, userID string) ([]GetAllShoppingRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllShopping, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllShoppingRow
	for rows.Next() {
		var i GetAllShoppingRow
		if err := rows.Scan(
			&i.CartID,
			&i.ItemName,
			&i.Quantity,
			&i.AddedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeItemShopping = `-- name: RemoveItemShopping :exec
DELETE FROM cart_items
WHERE item_id = ?
`

func (q *Queries) RemoveItemShopping(ctx context.Context, itemID string) error {
	_, err := q.db.ExecContext(ctx, removeItemShopping, itemID)
	return err
}
