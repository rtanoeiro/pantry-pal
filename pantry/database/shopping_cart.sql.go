// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: shopping_cart.sql

package database

import (
	"context"
)

const addItemShopping = `-- name: AddItemShopping :exec
INSERT INTO cart_items (id, user_id, item_name, quantity)
VALUES (?, ?, ?, ?)
`

type AddItemShoppingParams struct {
	ID       string
	UserID   string
	ItemName string
	Quantity int64
}

func (q *Queries) AddItemShopping(ctx context.Context, arg AddItemShoppingParams) error {
	_, err := q.db.ExecContext(ctx, addItemShopping,
		arg.ID,
		arg.UserID,
		arg.ItemName,
		arg.Quantity,
	)
	return err
}

const findItemShopping = `-- name: FindItemShopping :one
SELECT
    user_id,
    item_name,
    quantity
FROM cart_items
WHERE item_name = ?
AND user_id = ?
`

type FindItemShoppingParams struct {
	ItemName string
	UserID   string
}

type FindItemShoppingRow struct {
	UserID   string
	ItemName string
	Quantity int64
}

func (q *Queries) FindItemShopping(ctx context.Context, arg FindItemShoppingParams) (FindItemShoppingRow, error) {
	row := q.db.QueryRowContext(ctx, findItemShopping, arg.ItemName, arg.UserID)
	var i FindItemShoppingRow
	err := row.Scan(&i.UserID, &i.ItemName, &i.Quantity)
	return i, err
}

const getAllShopping = `-- name: GetAllShopping :many
SELECT
    user_id,
    item_name, 
    quantity
FROM cart_items
WHERE user_id = ?
`

type GetAllShoppingRow struct {
	UserID   string
	ItemName string
	Quantity int64
}

func (q *Queries) GetAllShopping(ctx context.Context, userID string) ([]GetAllShoppingRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllShopping, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllShoppingRow
	for rows.Next() {
		var i GetAllShoppingRow
		if err := rows.Scan(&i.UserID, &i.ItemName, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeItemShopping = `-- name: RemoveItemShopping :exec
DELETE FROM cart_items
WHERE item_name = ?
AND id = ?
`

type RemoveItemShoppingParams struct {
	ItemName string
	ID       string
}

func (q *Queries) RemoveItemShopping(ctx context.Context, arg RemoveItemShoppingParams) error {
	_, err := q.db.ExecContext(ctx, removeItemShopping, arg.ItemName, arg.ID)
	return err
}

const updateItemShopping = `-- name: UpdateItemShopping :exec
UPDATE cart_items
SET
    quantity = ?
WHERE item_name = ?
AND user_id = ?
`

type UpdateItemShoppingParams struct {
	Quantity int64
	ItemName string
	UserID   string
}

func (q *Queries) UpdateItemShopping(ctx context.Context, arg UpdateItemShoppingParams) error {
	_, err := q.db.ExecContext(ctx, updateItemShopping, arg.Quantity, arg.ItemName, arg.UserID)
	return err
}
