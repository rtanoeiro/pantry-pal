// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, email, password_hash, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?)

RETURNING id, name, email, password_hash, created_at, updated_at, is_admin
`

type CreateUserParams struct {
	ID           string
	Name         string
	Email        string
	PasswordHash string
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, email, password_hash, created_at, updated_at, is_admin
FROM users
WHERE id != ?
ORDER BY created_at DESC
`

func (q *Queries) GetAllUsers(ctx context.Context, id string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password_hash, created_at, updated_at, is_admin
FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, password_hash, created_at, updated_at, is_admin
FROM users
WHERE id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, email, password_hash, created_at, updated_at, is_admin
FROM users
WHERE name = ?
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
	)
	return i, err
}

const makeUserAdmin = `-- name: MakeUserAdmin :exec
UPDATE users
SET 
    is_admin = 1
WHERE id = ?

RETURNING id, name, email, password_hash, created_at, updated_at, is_admin
`

func (q *Queries) MakeUserAdmin(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, makeUserAdmin, id)
	return err
}

const removeUserAdmin = `-- name: RemoveUserAdmin :exec
UPDATE users
SET 
    is_admin = 0
WHERE id = ?
RETURNING id, name, email, password_hash, created_at, updated_at, is_admin
`

func (q *Queries) RemoveUserAdmin(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, removeUserAdmin, id)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE users
SET 
    email = ?
WHERE id = ?

RETURNING id, name, email, password_hash, created_at, updated_at, is_admin
`

type UpdateUserEmailParams struct {
	Email string
	ID    string
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserEmail, arg.Email, arg.ID)
	return err
}

const updateUserName = `-- name: UpdateUserName :exec
UPDATE users
SET 
    name = ?
WHERE id = ?

RETURNING id, name, email, password_hash, created_at, updated_at, is_admin
`

type UpdateUserNameParams struct {
	Name string
	ID   string
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) error {
	_, err := q.db.ExecContext(ctx, updateUserName, arg.Name, arg.ID)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET 
    password_hash = ?
WHERE id = ?

RETURNING id, name, email, password_hash, created_at, updated_at, is_admin
`

type UpdateUserPasswordParams struct {
	PasswordHash string
	ID           string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.PasswordHash, arg.ID)
	return err
}
