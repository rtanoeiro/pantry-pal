// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pantry.sql

package database

import (
	"context"
)

const addItem = `-- name: AddItem :one
INSERT INTO pantry (
    id, user_id, item_name, quantity, added_at, expiry_at
) VALUES (
    ?, ?, ?, ?, strftime('%Y-%m-%d','now'), ?
)
RETURNING id, user_id, item_name, quantity, added_at, expiry_at
`

type AddItemParams struct {
	ID       string
	UserID   string
	ItemName string
	Quantity int64
	ExpiryAt string
}

func (q *Queries) AddItem(ctx context.Context, arg AddItemParams) (Pantry, error) {
	row := q.db.QueryRowContext(ctx, addItem,
		arg.ID,
		arg.UserID,
		arg.ItemName,
		arg.Quantity,
		arg.ExpiryAt,
	)
	var i Pantry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ItemName,
		&i.Quantity,
		&i.AddedAt,
		&i.ExpiryAt,
	)
	return i, err
}

const findItemByName = `-- name: FindItemByName :many
SELECT id, user_id, item_name, quantity, added_at, expiry_at
FROM pantry
WHERE user_id = ?
    AND lower(item_name) = ?
`

type FindItemByNameParams struct {
	UserID   string
	ItemName string
}

func (q *Queries) FindItemByName(ctx context.Context, arg FindItemByNameParams) ([]Pantry, error) {
	rows, err := q.db.QueryContext(ctx, findItemByName, arg.UserID, arg.ItemName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pantry
	for rows.Next() {
		var i Pantry
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ItemName,
			&i.Quantity,
			&i.AddedAt,
			&i.ExpiryAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllItems = `-- name: GetAllItems :many
SELECT id, user_id, item_name, quantity, added_at, expiry_at
FROM pantry
WHERE user_id = ?
ORDER BY expiry_at DESC
`

func (q *Queries) GetAllItems(ctx context.Context, userID string) ([]Pantry, error) {
	rows, err := q.db.QueryContext(ctx, getAllItems, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pantry
	for rows.Next() {
		var i Pantry
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ItemName,
			&i.Quantity,
			&i.AddedAt,
			&i.ExpiryAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeItem = `-- name: RemoveItem :one
DELETE FROM pantry
WHERE id = ?
    and user_id = ?
RETURNING id, user_id, item_name, quantity, added_at, expiry_at
`

type RemoveItemParams struct {
	ID     string
	UserID string
}

func (q *Queries) RemoveItem(ctx context.Context, arg RemoveItemParams) (Pantry, error) {
	row := q.db.QueryRowContext(ctx, removeItem, arg.ID, arg.UserID)
	var i Pantry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ItemName,
		&i.Quantity,
		&i.AddedAt,
		&i.ExpiryAt,
	)
	return i, err
}

const updateItemQuantity = `-- name: UpdateItemQuantity :one
UPDATE pantry
SET
    quantity = ?
WHERE id = ?
    AND user_id = ?

RETURNING id, user_id, item_name, quantity, added_at, expiry_at
`

type UpdateItemQuantityParams struct {
	Quantity int64
	ID       string
	UserID   string
}

// What'll see in the UI is a list of items, so we can probably use ID
func (q *Queries) UpdateItemQuantity(ctx context.Context, arg UpdateItemQuantityParams) (Pantry, error) {
	row := q.db.QueryRowContext(ctx, updateItemQuantity, arg.Quantity, arg.ID, arg.UserID)
	var i Pantry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ItemName,
		&i.Quantity,
		&i.AddedAt,
		&i.ExpiryAt,
	)
	return i, err
}
